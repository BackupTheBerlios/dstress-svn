diff -uNr gcc-3.3.5.orig/gcc/config/darwin.h gcc-3.3.5/gcc/config/darwin.h
--- gcc-3.3.5.orig/gcc/config/darwin.h	Tue Apr  6 20:48:47 2004
+++ gcc-3.3.5/gcc/config/darwin.h	Thu Nov 11 12:20:34 2004
@@ -84,6 +84,10 @@
 #undef	DEFAULT_PCC_STRUCT_RETURN
 #define DEFAULT_PCC_STRUCT_RETURN 0
 
+/* APPLE LOCAL framework headers */
+/* Need to look for framework headers.  */
+#define FRAMEWORK_HEADERS
+
 /* This table intercepts weirdo options whose names would interfere
    with normal driver conventions, and either translates them into
    standardly-named options, or adds a 'Z' so that they can get to
diff -uNr gcc-3.3.5.orig/gcc/cppfiles.c gcc-3.3.5/gcc/cppfiles.c
--- gcc-3.3.5.orig/gcc/cppfiles.c	Wed Nov 20 20:49:53 2002
+++ gcc-3.3.5/gcc/cppfiles.c	Thu Nov 11 12:20:34 2004
@@ -124,6 +124,24 @@
 					 struct search_path *));
 static struct search_path *search_from PARAMS ((cpp_reader *,
 						enum include_type));
+
+/* APPLE LOCAL framework headers */
+#ifdef FRAMEWORK_HEADERS
+struct framework_header {const char * dirName; int dirNameLen; };
+static struct framework_header framework_header_dirs[] = {
+   { "PrivateHeaders", 14 },
+   { "Headers", 7 },
+   { NULL, 0 }
+};
+
+static struct include_file *
+find_subframework_file PARAMS ((cpp_reader *, const cpp_token *,
+                              struct search_path *));
+static struct include_file *
+	find_framework_file PARAMS ((cpp_reader *, const cpp_token *,
+				   enum include_type));
+#endif /* FRAMEWORK_HEADERS  */
+
 static struct include_file *
 	find_include_file PARAMS ((cpp_reader *, const cpp_token *,
 				   enum include_type));
@@ -585,7 +603,15 @@
   if (type == IT_INCLUDE_NEXT && pfile->buffer->inc->foundhere)
     path = pfile->buffer->inc->foundhere->next;
   else if (header->type == CPP_HEADER_NAME)
-    path = CPP_OPTION (pfile, bracket_include);
+    {
+      path = CPP_OPTION (pfile, bracket_include);
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+      if (path == NULL)
+	path = CPP_OPTION (pfile, framework_include);
+#endif
+/* APPLE LOCAL end framework headers */
+    }
   else
     path = search_from (pfile, type);
 
@@ -624,6 +650,212 @@
   return 0;
 }
 
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+/* Search for HEADER frameworks.  Return 0 if there is no such file
+   (or it's un-openable), in which case an error code will be in
+   errno. Translates the header file name suitable for frameworks from
+   "Foundation/Foundation.h" into
+   "Foundation.frameworks/PrivateHeaders/Foundation.h".  */
+
+static struct include_file *
+find_framework_file (pfile, header, type)
+     cpp_reader *pfile;
+     const cpp_token *header;
+     enum include_type type ATTRIBUTE_UNUSED;
+{
+  struct include_file *inc = NULL;
+  const char *fname = (const char *) header->val.str.text;
+  struct search_path *path;
+  struct include_file *file;
+  char *n, *frname;
+  unsigned char *bufptr;
+  unsigned position;
+  int frname_len, slash_position, index; 
+
+  if (fname == NULL)
+    return 0; 
+
+  /* For #include_next, skip in the search path past the dir in which
+     the current file was found, but if it was found via an absolute
+     path use the normal search logic.  */
+
+  path = NULL;
+  path = CPP_OPTION (pfile, framework_include);
+
+  if (path == NULL)
+    {
+      cpp_error (pfile, DL_ERROR, "No include path in which to find %s", fname);
+      return NO_INCLUDE_PATH;
+    }
+
+  /* Framework header filename includes framework name and header name in the
+     "Foundation/Foundation.h" form. If it does not include slash it is not a
+     framework include.  */
+  bufptr = NULL;
+  slash_position = -1;
+  position = 0;
+  for (bufptr = (unsigned char *) fname; bufptr != NULL;  bufptr++)
+    {
+       if (position > strlen(fname))
+         break;
+       if (*bufptr == '/')
+         {
+           slash_position = position;
+           break;
+         }
+       position++;
+    }
+  if (slash_position == -1)
+     return 0;
+
+  /* 25 = strlen(".framework/") + strlen("PrivateHeaders") */
+  frname = (char *) alloca (strlen (fname) + pfile->max_include_len + 2 + 25);
+ 
+  for (; path; path = path->next)
+    {
+      strncpy (&frname[0], path->name, path->len);
+      frname[path->len] = '/';
+      frname_len = path->len + 1;
+      strncpy (&frname[frname_len], fname, slash_position);
+      frname_len += slash_position;
+      strncpy (&frname[frname_len], ".framework/", 11);
+      frname_len += 11;
+
+      /* Append framework_header_dirs and header file name */
+      for (index = 0; framework_header_dirs[index].dirName; index++)
+        {
+          strncpy (&frname[frname_len], 
+                   framework_header_dirs[index].dirName,
+                   framework_header_dirs[index].dirNameLen);
+          strcpy (&frname[frname_len + framework_header_dirs[index].dirNameLen],
+                  &fname[slash_position]);
+
+          if (CPP_OPTION (pfile, remap))
+            n = remap_filename (pfile, frname, path);
+          else
+	    n = frname;
+
+
+          file = open_file (pfile, n);
+          if (file)
+	    {
+	      file->foundhere = path;
+	      return file;
+	    }
+        }
+    }
+
+  path = CPP_OPTION (pfile, framework_include);
+
+  /* Find in subframework */
+  for (; path; path = path->next) 
+    {
+      inc = find_subframework_file (pfile, header, path);
+      if (inc)
+        return inc;
+    }
+
+  return 0;
+}
+
+/* Search for HEADER in sub frameworks.  Return 0 if there is no such
+   file (or it's un-openable), in which case an error code will be in
+   errno.  */
+
+static struct include_file *
+find_subframework_file (pfile, header, path)
+     cpp_reader *pfile;
+     const cpp_token *header;
+     struct search_path *path;
+{
+  const char *fname = (const char *) header->val.str.text;
+  const char *pname; /* Parent header name */
+  struct include_file *file;
+  char *n, *sfrname;
+  const char *dot_framework = ".framework/";
+  char *bufptr; 
+  int sfrname_len, position, index; 
+  struct cpp_buffer *b;
+
+  for (b = pfile->buffer; b && b->inc && b->inc->name; b = b->prev)
+    {
+      pname = b->inc->name;
+      /* Sub framework header filename includes parent framework name and
+         header name in the "CarbonCore/OSUtils.h" form. If it does not
+         include slash it is not a sub framework include.  */
+      bufptr = NULL;
+      position = 0;
+      for (bufptr = (char *) fname; bufptr != NULL; bufptr++)
+        {
+           if (*bufptr == '/')
+              break;
+           position++;
+        }
+      if (position == 0)
+         return 0;
+
+      bufptr = NULL;
+      bufptr = strstr (pname, dot_framework);
+
+      /* If the parent header is not of any framework, then this header
+         can not be part of any subframework.  */
+      if (!bufptr)
+        return 0;
+
+      /* Now translate. For example,                   +- bufptr
+          fname = CarbonCore/OSUtils.h                 | 
+          pname = /System/Library/Frameworks/Foundation.framework/Headers/Foundation.h into
+          sfrname = /System/Library/Frameworks/Foundation.framework/Frameworks/CarbonCore.framework/Headers/OSUtils.h
+      */
+
+      /* 36 = strlen ("Frameworks/") + strlen (".framework/") + strlen ("PrivateHeaders") */
+      sfrname = (char *) alloca (strlen (pname) + strlen (fname) + 2 + 36);
+ 
+      /* Advance bufptr */
+      bufptr += strlen (dot_framework);
+
+      sfrname_len = bufptr - pname; 
+
+      strncpy (&sfrname[0], pname, sfrname_len);
+
+      strncpy (&sfrname[sfrname_len], "Frameworks/", 11);
+      sfrname_len += 11;
+
+      strncpy (&sfrname[sfrname_len], fname, position);
+      sfrname_len += position;
+
+      strncpy (&sfrname[sfrname_len], ".framework/", 11);
+      sfrname_len += 11;
+
+      /* Append framework_header_dirs and header file name */
+      for (index = 0; framework_header_dirs[index].dirName; index++)
+        {
+          strncpy (&sfrname[sfrname_len], 
+                   framework_header_dirs[index].dirName,
+                   framework_header_dirs[index].dirNameLen);
+          strcpy (&sfrname[sfrname_len + framework_header_dirs[index].dirNameLen],
+                  &fname[position]);
+    
+          if (CPP_OPTION (pfile, remap))
+            n = remap_filename (pfile, sfrname, path);
+          else
+            n = sfrname;
+   
+ 
+          file = open_file (pfile, n);
+          if (file)
+            {
+              file->foundhere = path;
+              return file;
+            }
+        }
+    }
+  return 0;
+}
+#endif /* FRAMEWORK_HEADERS  */
+/* APPLE LOCAL end framework headers */
+
 /* Not everyone who wants to set system-header-ness on a buffer can
    see the details of a buffer.  This is an exported interface because
    fix-header needs it.  */
@@ -709,6 +949,14 @@
 {
   bool stacked = false;
   struct include_file *inc = find_include_file (pfile, header, type);
+
+  /* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+  /* Search framework */
+  if (inc == 0)
+    inc = find_framework_file (pfile, header, type);
+#endif
+  /* APPLE LOCAL end framework headers */
 
   if (inc == 0)
     handle_missing_header (pfile, (const char *) header->val.str.text,
diff -uNr gcc-3.3.5.orig/gcc/cppinit.c gcc-3.3.5/gcc/cppinit.c
--- gcc-3.3.5.orig/gcc/cppinit.c	Tue Mar  2 21:09:15 2004
+++ gcc-3.3.5/gcc/cppinit.c	Thu Nov 11 12:20:34 2004
@@ -28,6 +28,18 @@
 #include "mkdeps.h"
 #include "cppdefault.h"
 
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+struct { const char *path; int u1; }
+framework_paths_defaults_array [] = {
+  {"/System/Library/Frameworks", 0},
+  {"/Library/Frameworks", 0},
+  {"/Local/Library/Frameworks", 0},
+  {NULL, 0}
+};
+#endif /* FRAMEWORK_HEADERS */
+/* APPLE LOCAL end framework headers */
+
 /* Windows does not natively support inodes, and neither does MSDOS.
    Cygwin's emulation can generate non-unique inodes, so don't use it.
    VMS has non-numeric inodes.  */
@@ -67,6 +79,12 @@
   struct search_path *brack_head, *brack_tail;
   struct search_path *systm_head, *systm_tail;
   struct search_path *after_head, *after_tail;
+  /* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+  struct search_path *framework_system_head, *framework_system_tail;
+  struct search_path *framework_head, *framework_tail;
+#endif
+  /* APPLE LOCAL end framework headers */
 
   struct pending_option *imacros_head, *imacros_tail;
   struct pending_option *include_head, *include_tail;
@@ -106,6 +124,11 @@
 						 struct pending_option *));
 static void free_chain			PARAMS ((struct pending_option *));
 static void init_standard_includes	PARAMS ((cpp_reader *));
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+static void init_standard_frameworks	PARAMS ((cpp_reader *));
+#endif 
+/* APPLE LOCAL end framework headers */
 static void read_original_filename	PARAMS ((cpp_reader *));
 static void new_pending_directive	PARAMS ((struct cpp_pending *,
 						 const char *,
@@ -115,7 +138,8 @@
 
 /* Fourth argument to append_include_chain: chain to use.
    Note it's never asked to append to the quote chain.  */
-enum { BRACKET = 0, SYSTEM, AFTER };
+/* APPLE LOCAL framework headers */
+enum { BRACKET = 0, SYSTEM, AFTER, FRAMEWORK, FRAMEWORK_SYSTEM };
 
 /* If we have designated initializers (GCC >2.7) these tables can be
    initialized, constant data.  Otherwise, they have to be filled in at
@@ -245,7 +269,13 @@
   /* Both systm and after include file lists should be treated as system
      include files since these two lists are really just a concatenation
      of one "system" list.  */
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+  if (path == SYSTEM || path == AFTER || path == FRAMEWORK_SYSTEM)
+#else
   if (path == SYSTEM || path == AFTER)
+#endif
+/* APPLE LOCAL end framework headers */
     new->sysp = cxx_aware ? 1 : 2;
   else
     new->sysp = 0;
@@ -257,6 +287,12 @@
     case BRACKET:	APPEND (pend, brack, new); break;
     case SYSTEM:	APPEND (pend, systm, new); break;
     case AFTER:		APPEND (pend, after, new); break;
+    /* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+    case FRAMEWORK_SYSTEM:	APPEND (pend, framework_system, new); break;
+    case FRAMEWORK:	APPEND (pend, framework, new); break;
+#endif
+    /* APPLE LOCAL end framework headers */
     }
 }
 
@@ -366,6 +402,8 @@
    INO_T_EQ()).  The system_include and after_include chains are never
    referred to again after this function; all access is through the
    bracket_include path.  */
+/* APPLE LOCAL framework headers
+   Merge System Framework and User Framework into framework_include chain.  */
 static void
 merge_include_chains (pfile)
      cpp_reader *pfile;
@@ -423,6 +461,16 @@
 
   CPP_OPTION (pfile, quote_include) = quote;
   CPP_OPTION (pfile, bracket_include) = brack;
+
+  /* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+  if (pend->framework_head)
+    pend->framework_tail->next = pend->framework_system_head;
+  else
+    pend->framework_head = pend->framework_system_head;
+  CPP_OPTION (pfile, framework_include) = pend->framework_head;
+#endif
+  /* APPLE LOCAL end framework headers */
 }
 
 /* A set of booleans indicating what CPP features each source language
@@ -861,8 +909,45 @@
 	  append_include_chain (pfile, str, SYSTEM, p->cxx_aware);
 	}
     }
+
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+  init_standard_frameworks (pfile);
+#endif
+/* APPLE LOCAL end framework headers */
 }
 
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+static void 
+init_standard_frameworks (pfile)
+     cpp_reader *pfile;
+{
+  /* Setup default search path for frameworks.  */
+  int i = 0;
+  const char *path;
+  char *next_root = getenv ("NEXT_ROOT");
+  if (next_root && *next_root && next_root[strlen (next_root) - 1] == '/')
+    next_root[strlen (next_root) - 1] = '\0';
+  while ((path = framework_paths_defaults_array[i++].path))
+    {
+      char *new_fname = NULL;
+      if (next_root && *next_root)
+	new_fname = (char *) xmalloc (strlen (next_root) + strlen (path) + 1);
+      if (new_fname)
+	sprintf (new_fname, "%s%s", next_root, path);
+      else
+	{
+	  new_fname = (char *) xmalloc (strlen (path) + 1);
+	  strcpy (new_fname, path);
+	}
+      /* System Framework headers are cxx aware.  */
+      append_include_chain (pfile, new_fname, FRAMEWORK_SYSTEM, 1); 
+    }  
+}       
+#endif    
+/* APPLE LOCAL end framework headers */
+
 /* Pushes a command line -imacro and -include file indicated by P onto
    the buffer stack.  Returns nonzero if successful.  */
 static bool
@@ -1001,6 +1087,16 @@
 	  fprintf (stderr, " %s\n", l->name);
 	}
       fprintf (stderr, _("End of search list.\n"));
+      /* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+      fprintf (stderr, _("Framework search starts here:\n"));
+      for (l = CPP_OPTION (pfile, framework_include); l; l = l->next)
+	{
+	  fprintf (stderr, " %s\n", l->name);
+	}
+      fprintf (stderr, _("End of framework search list.\n"));
+#endif /* FRAMEWORK_HEADERS */
+      /* APPLE LOCAL end framework headers */
     }
 
   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)
@@ -1196,9 +1292,13 @@
 #define COMMAND_LINE_OPTIONS                                                  \
   DEF_OPT("A",                        no_ass, OPT_A)                          \
   DEF_OPT("D",                        no_mac, OPT_D)                          \
+  /* APPLE LOCAL framework headers */  \
+  DEF_OPT("F",                        no_dir, OPT_F)                          \
   DEF_OPT("I",                        no_dir, OPT_I)                          \
   DEF_OPT("U",                        no_mac, OPT_U)                          \
   DEF_OPT("idirafter",                no_dir, OPT_idirafter)                  \
+  /* APPLE LOCAL framework headers */  \
+  DEF_OPT("iframework",               no_dir, OPT_iframework)                 \
   DEF_OPT("imacros",                  no_fil, OPT_imacros)                    \
   DEF_OPT("include",                  no_fil, OPT_include)                    \
   DEF_OPT("iprefix",                  no_pth, OPT_iprefix)                    \
@@ -1391,6 +1491,16 @@
 	     include directory.  */
 	  append_include_chain (pfile, xstrdup (arg), SYSTEM, 0);
 	  break;
+        /* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+	case OPT_F:           
+	case OPT_iframework:
+	  /* Add directory to beginning of system include path, as a system
+	     include directory.  */
+	  append_include_chain (pfile, xstrdup (arg), FRAMEWORK, 0);
+	  break;
+#endif
+        /* APPLE LOCAL end framework headers */
 	case OPT_include:
 	case OPT_imacros:
 	  {
diff -uNr gcc-3.3.5.orig/gcc/cpplib.h gcc-3.3.5/gcc/cpplib.h
--- gcc-3.3.5.orig/gcc/cpplib.h	Fri Nov  7 00:13:31 2003
+++ gcc-3.3.5/gcc/cpplib.h	Thu Nov 11 12:20:34 2004
@@ -230,6 +230,10 @@
   /* Search paths for include files.  */
   struct search_path *quote_include;	/* "" */
   struct search_path *bracket_include;  /* <> */
+  /* APPLE LOCAL framework headers */
+#ifdef FRAMEWORK_HEADERS
+  struct search_path *framework_include;
+#endif
 
   /* Map between header names and file names, used only on DOS where
      file names are limited in length.  */
diff -uNr gcc-3.3.5.orig/gcc/doc/invoke.texi gcc-3.3.5/gcc/doc/invoke.texi
--- gcc-3.3.5.orig/gcc/doc/invoke.texi	Fri Aug 27 00:42:53 2004
+++ gcc-3.3.5/gcc/doc/invoke.texi	Thu Nov 11 12:20:36 2004
@@ -311,7 +311,11 @@
 
 @item Directory Options
 @xref{Directory Options,,Options for Directory Search}.
-@gccoptlist{-B@var{prefix}  -I@var{dir}  -I-  -L@var{dir}  -specs=@var{file}}
+@gccoptlist{
+-B@var{prefix}  -I@var{dir}  -I- @gol
+@c APPLE LOCAL framework headers
+-F@var{dir} (APPLE ONLY) @gol
+-L@var{dir}  -specs=@var{file}}
 
 @item Target Options
 @c I wrote this xref this way to avoid overfull hbox. -- rms
@@ -4768,6 +4772,23 @@
 @opindex L
 Add directory @var{dir} to the list of directories to be searched
 for @option{-l}.
+
+@c APPLE LOCAL begin framework headers
+@item -F@var{dir}
+@opindex F
+In Apple's version of GCC only, add the directory @var{dir} to the head
+of the list of directories to be searched for frameworks.
+
+The framework search algorithm is, for an inclusion of
+@samp{<Fmwk/Header.h>}, to look for files named
+@file{@var{path}/Fmwk.framework/Headers/Header.h} or
+@file{@var{path}/Fmwk.framework/PrivateHeaders/Header.h} where
+@var{path} includes @file{/System/Library/Frameworks/}
+@file{/Library/Frameworks/}, and @file{/Local/Library/Frameworks/}, plus
+any additional paths specified by @option{-F}.
+
+All the @option{-F} options are also passed to the linker.
+@c APPLE LOCAL end framework headers
 
 @item -B@var{prefix}
 @opindex B
diff -uNr gcc-3.3.5.orig/gcc/gcc.c gcc-3.3.5/gcc/gcc.c
--- gcc-3.3.5.orig/gcc/gcc.c	Thu Apr  1 18:55:17 2004
+++ gcc-3.3.5/gcc/gcc.c	Thu Nov 11 12:20:36 2004
@@ -288,6 +288,12 @@
 static char *build_search_list	PARAMS ((struct path_prefix *, const char *, int));
 static void putenv_from_prefixes PARAMS ((struct path_prefix *, const char *));
 static int access_check		PARAMS ((const char *, int));
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+static void safe_add_prefix 	PARAMS ((struct path_prefix *, char *,
+					 int, int, int *));
+#endif
+/* APPLE LOCAL end framework headers */
 static char *find_a_file	PARAMS ((struct path_prefix *, const char *,
 					 int, int));
 static void add_prefix		PARAMS ((struct path_prefix *, const char *,
@@ -432,6 +438,8 @@
  %I	Substitute any of -iprefix (made from GCC_EXEC_PREFIX), -isysroot
 	(made from TARGET_SYSTEM_ROOT), and -isystem (made from COMPILER_PATH
 	and -B options) as necessary.
+ APPLE LOCAL framework headers
+ %Q	Substitute -iframework default paths.
  %s     current argument is the name of a library or startup file of some sort.
         Search for that file in a standard list of directories
 	and substitute the full name found.
@@ -704,6 +712,8 @@
    file that happens to exist is up-to-date.  */
 static const char *cpp_unique_options =
 "%{C:%{!E:%eGNU C does not support -C without using -E}}\
+"/* APPLE LOCAL framework headers */"\
+ %{!traditional:%{!ftraditional:%{!traditional-cpp:%Q}}} %{F*}\
  %{CC:%{!E:%eGNU C does not support -CC without using -E}}\
  %{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*} %{P} %I\
  %{MD:-MD %{!o:%b.d}%{o*:%.d%*}}\
@@ -1293,6 +1303,13 @@
 
 static struct path_prefix include_prefixes = { 0, 0, "include" };
 
+/* APPLE LOCAL begin framework headers */
+#ifdef FRAMEWORK_HEADERS
+/* A vector of the frameworks to search.  */
+static struct path_prefix default_framework_paths = {0, 0, "default_frameworks"};
+#endif /* FRAMEWORK_HEADERS */
+/* APPLE LOCAL end framework headers */
+
 /* Suffix to attach to directories searched for commands.
    This looks like `MACHINE/VERSION/'.  */
 
@@ -2557,6 +2574,30 @@
   add_prefix (pprefix, prefix, component, priority,
 	      require_machine_suffix, warn, os_multilib);
 }
+
+/* APPLE LOCAL framework headers */
+#ifdef FRAMEWORK_HEADERS
+static void
+safe_add_prefix (pprefix, prefix, first, require_machine_suffix, warn)
+     struct path_prefix *pprefix;
+     char *prefix;
+     int first;
+     int require_machine_suffix;
+     int *warn;
+{
+  int len = strlen (prefix);
+  char *temp = prefix;
+  if (prefix[len - 1] != '/')
+    {
+      temp = xmalloc (len+2);
+      strcpy (temp, prefix);
+      temp[len] = '/';
+      temp[len+1] = 0;
+    }
+  add_prefix (pprefix, temp, "GCC", first, require_machine_suffix, warn, 0);
+}
+#endif /* FRAMEWORK_HEADERS */
+
 
 /* Execute the command specified by the arguments on the current line of spec.
    When using pipes, this includes several piped-together commands
@@ -4657,6 +4698,25 @@
 		}
 	    }
 	    break;
+
+	    /* APPLE LOCAL begin framework headers */
+	  case 'Q':
+#ifdef FRAMEWORK_HEADERS
+	    {
+	      struct prefix_list *dfpl = default_framework_paths.plist;
+
+	      for (; dfpl; dfpl = dfpl->next)
+		{
+		  char *tmpstr = xmalloc (strlen (dfpl->prefix) + 5);
+		  sprintf (tmpstr, "-F%s", dfpl->prefix);
+		  do_spec_1 (tmpstr, 1, NULL);
+		  do_spec_1 (" ", 0, NULL);		/* fh */
+		  free (tmpstr);
+		}
+	    }
+#endif /* FRAMEWORK_HEADERS */
+	    break;
+	    /* APPLE LOCAL end framework headers */
 
 	  case 'o':
 	    {
diff -uNr gcc-3.3.5.orig/gcc/gcc.h gcc-3.3.5/gcc/gcc.h
--- gcc-3.3.5.orig/gcc/gcc.h	Tue Mar 11 01:59:24 2003
+++ gcc-3.3.5/gcc/gcc.h	Thu Nov 11 12:20:36 2004
@@ -37,6 +37,8 @@
   ((CHAR) == 'D' || (CHAR) == 'U' || (CHAR) == 'o' \
    || (CHAR) == 'e' || (CHAR) == 'T' || (CHAR) == 'u' \
    || (CHAR) == 'I' || (CHAR) == 'm' || (CHAR) == 'x' \
+   /* APPLE LOCAL framework headers */ \
+   || (CHAR) == 'F' \
    || (CHAR) == 'L' || (CHAR) == 'A' || (CHAR) == 'V' \
    || (CHAR) == 'B' || (CHAR) == 'b')
 
